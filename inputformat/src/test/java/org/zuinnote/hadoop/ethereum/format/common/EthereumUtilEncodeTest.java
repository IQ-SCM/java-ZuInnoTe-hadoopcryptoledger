/**
* Copyright 2017 ZuInnoTe (JÃ¶rn Franke) <zuinnote@gmail.com>
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

package org.zuinnote.hadoop.ethereum.format.common;


import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class EthereumUtilEncodeTest {
   @Test
   public void encodeRLPElementLargeByteArray() {
	   String hexString
	   byte[] byteArray=EthereumUtil.convertHexStringToByteArray(hexString);
	   byte[] rlpEncode = EthereumUtil.encodeRLPElement(byteArray);
	   String rlpHexString = "B90164"+hexString;
	   assertEquals(rlpHexString,EthereumUtil.convertByteArrayToHexString(rlpEncode));
   }
   @Test
   public void encodeRLPElementLargeByteArray2()
   {
	   String hexString
	   byte[] byteArray=EthereumUtil.convertHexStringToByteArray(hexString);
	   byte[] rlpEncode = EthereumUtil.encodeRLPElement(byteArray);
	   String rlpHexString = "B90610"+hexString;
	   assertEquals(rlpHexString,EthereumUtil.convertByteArrayToHexString(rlpEncode));
   }
	
}
